---
-
  hosts: windows
  strategy: free
  gather_facts: false
  tasks:


          - name: Fetch current SQL Version details
            win_shell: |
                    $query1 = "SELECT CAST(SERVERPROPERTY('productversion') AS varchar(20)) AS ProductVersion, 'SQL' + 
                        CASE CAST(SERVERPROPERTY('productversion') AS CHAR(2))
                                  WHEN '8.' THEN '2000'
                                  WHEN '9.' THEN '2005'
                                  WHEN '10' THEN '2008/2008R2'
                                  WHEN '11' THEN '2012'
                                  WHEN '12' THEN '2014'
                                  WHEN '13' THEN '2016'
                                  WHEN '15' THEN '2019'
                                  WHEN '16' THEN '2022'
                                  END AS SQLVersion,
                         CAST((SUBSTRING(CAST(SERVERPROPERTY('productversion') AS varchar(20)), 1, 2)) AS int) AS MajorVersion,
                         CAST((SUBSTRING(CAST(SERVERPROPERTY('productversion') AS varchar(20)), 6, 4)) AS int) AS MinorVersion"
                     $result1 = Invoke-Sqlcmd -Query $query1
                     $result1 | ConvertTo-Json
            register: version_result
            tags:
                    - FetchVersion


          #- name: Debug Version Result
          #  debug:
          #          var: version_result
          #  tags:
          #         - DisplayVersionResult



          - name: Parse JSON Version results
            set_fact:
                    version: "{{ version_result.stdout | from_json }}"
            tags:
                    - ParseVersion



          - name: Display Version
            debug:
                    var: version.MinorVersion
            tags:
                    - DisplayVersion


          - name: Fetch DSR Config
            win_shell: |
                    $server = "SQL2"
                    $database = "SQLPROFILE"
                    $query3 = "SELECT (SELECT value FROM [SQL2].[SQLPROFILE].[dbo].config WHERE Configuation = '{{ version.SQLVersion }}Path') AS SQLPath, (SELECT value FROM [SQL2].[SQLPROFILE].[dbo].config WHERE Configuation = '{{ version.SQLVersion }}FileName') AS SQLFileName, (SELECT value FROM [SQL2].[SQLPROFILE].[dbo].config WHERE Configuation = 'destination') AS destination, (SELECT SUBSTRING(value,6,4) FROM [SQL2].[SQLPROFILE].[dbo].config WHERE Configuation = '{{ version.SQLVersion }}Version') AS MinorVersion"
                    $query_result3 = Invoke-Sqlcmd -Query $query3
                    $query_result3 | ConvertTo-Json
            register: dsrconfigresult
            tags:
                    - FetchDSRConfig


          - name: Parse DSR Config
            set_fact:
                    config: "{{ dsrconfigresult.stdout | from_json }}"
            tags:
                    - ParseDSRConfig



          - name: Display the DSR configs
            debug:
                    var: config.MinorVersion
            tags:
                    - DisplayConfig



          - name: Copy patch file
            win_copy:
                    src: "{{ config.SQLPath }}\\{{ config.SQLFileName }}.exe"
                    dest: "{{ config.destination }}\\{{ config.SQLFileName }}.exe"
                    remote_src: yes
            become: yes
            become_method: runas
            become_user: MYLAB\sqluser
            vars:
                    ansible_become_password: W_inter@01

            when: version.MinorVersion | int < config.MinorVersion | int
            register: copy_result
            tags:
                    - copy



          #- name: Display copy result
          #  debug:
          #          var: copy_result
          #  tags:
          #           - DisplayCopyResult



          - name: AOAG Checks
            win_shell: |
                    $query3 = "
                         DECLARE @IsAlwaysOn BIT;
                         DECLARE @ServerRole VARCHAR(10);
                         DECLARE @SyncState BIT;
                         IF EXISTS (SELECT * FROM sys.dm_hadr_availability_replica_states)
                         BEGIN
                                SET @IsAlwaysOn = 1;
                                SELECT @ServerRole = CASE WHEN ars.role_desc = 'PRIMARY' THEN 'PRIMARY'
                                                          WHEN ars.role_desc = 'SECONDARY' THEN 'SECONDARY'
                                                          ELSE 'UNKNOWN' END
                                FROM sys.dm_hadr_availability_replica_states ars JOIN sys.availability_replicas ar ON ars.replica_id = ar.replica_id WHERE ar.replica_server_name = @@SERVERNAME; 
                         END
                         ELSE
                         BEGIN
                                SET @IsAlwaysOn = 0;
                                SET @ServerRole = 'N/A';
                         END
                         IF EXISTS(
                                   SELECT * FROM sys.availability_groups ag 
                                   JOIN sys.availability_replicas ar ON ag.group_id = ar.group_id 
                                   JOIN sys.dm_hadr_availability_replica_states ars ON ar.replica_id = ars.replica_id 
                                   LEFT JOIN sys.dm_hadr_database_replica_states drs ON ars.replica_id = drs.replica_id 
                                   WHERE ar.replica_server_name = @@SERVERNAME AND drs.synchronization_state_desc <> 'SYNCHRONIZED'
                                   )

                               SET @SyncState = 0;
                         ELSE
                               SET @SyncState = 1;

                         SELECT @IsAlwaysOn AS [AlwaysOn], @ServerRole AS [Role], @SyncState AS [State];"

                    $AOResult = Invoke-Sqlcmd -Query $query3
                    $AOResult | ConvertTo-Json
            register: aoag_result
            tags:
                    - FetchAOAGConfig


          - name: Parse the AOAG Config Result
            set_fact:
                    aoag_config: "{{ aoag_result.stdout | from_json }}"
            tags:
                    - ParseAOAGConfig



         #- name: Display AOAG Config Result
         #  debug:
         #           var: aoag_config
         #  tags:
         #           - DisplayAOAGConfig



          - name: AOAG Patching
            block:
                     - name: Install the update in AOAG Secondary
                       win_package:
                              path: "{{ config.destination }}\\{{ config.SQLFileName }}.exe"
                              state: present
                              arguments: /quiet /IAcceptSQLServerLicenseTerms /Action=Patch /AllInstances
                     
                       register: aoag_install_result
                       

                       tags:
                               - AOAGInstall

         #           - name: Display AOAG Installation status
         #             debug:
         #                      var: aoag_install_result
         #             tags:
         #                      - DisplayAOAGInstallStatus


                     - name: Reboot Secondary
                       win_reboot:
                               reboot_timeout: 600
                       when: aoag_install_result.changed


                     - name: AOAG post Patching Checks
                       import_tasks: aoag_checks.yaml
                       register: aoag_postchecks
                       tags:
                               AOAGPostChecks

                     - name: Display AOAG post Patching results
                       debug:
                               var: aoag_postchecks
                       tags:
                               - DisplaypostAOAGchecks

                     - name: Parse AOAG Post checks
                       set_fact:
                               aoag_postconfig: "{{ aoag_postchecks.stdout | from_json }}"

                     - name: Display AOAG Post Patching Status
                       debug:
                               var: aoag_postconfig.State


                     - name: Failover AG if Secondary is sync
                       win_shell: |
                               $query4 = "ALTER AVAILABILITY GROUP [{{ aoag_postconfig.AGName }}] FAILOVER;"
                               $failoverResult = Invoke=Sqlcmd -Query $query4
                               $failoverResult | ConvertTo-Json
                       register: $failoverstate
                       when: aoag_postconfig.State == 1

            when:
                     - (version.MinorVersion | int) < (config.MinorVersion | int)
                     - aoag_config.AlwaysOn == 1
                     - aoag_config.Role == "SECONDARY"
                     - aoag_config.State == 1
           


          - name: Install the Update in Standalone Server
            ansible.windows.win_package:
                    path: "{{ config.destination }}\\{{ config.SQLFileName }}.exe"
                    state: present
                    arguments: /quiet /IAcceptSQLServerLicenseTerms /Action=Patch /AllInstances
            when:
                    - version.MinorVersion | int < config.MinorVersion | int
                    - aoag_config.AlwaysOn == 0
            register: install_result
            tags:
                    - install
          


          - name: Display installation status
            debug:
                    var: install_result
            tags:
                    - displayinstallstatus  

                      
                      
...
